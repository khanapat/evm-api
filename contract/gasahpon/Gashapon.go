// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package gashapon

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// GashaponRewardRate is an auto generated low-level Go binding around an user-defined struct.
type GashaponRewardRate struct {
	ItemId      *big.Int
	Probability *big.Int
	IsJackpot   bool
}

// GashaponRound is an auto generated low-level Go binding around an user-defined struct.
type GashaponRound struct {
	TotalPrizePool *big.Int
	PlayCount      *big.Int
}

// GashaponMetaData contains all meta data concerning the Gashapon contract.
var GashaponMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_playTopUp\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyPlayed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyRefunded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyRevealed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlockhashExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidHashedSecret\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProbability\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SecretExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooEarlyRefund\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"playRunningNo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hashedSecret\",\"type\":\"bytes32\"}],\"name\":\"PlayGasha\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"playRunningNo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"playRunningNo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"random\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"secret\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardItemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPrizePool\",\"type\":\"uint256\"}],\"name\":\"Reveal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLAYGASHA_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROBABILITY_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusPlayCountThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusTopUp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"calPlayTopUpPerTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"checkBlockhashExpire\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hashedSecret\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_secret\",\"type\":\"string\"}],\"name\":\"checkHashedSecret\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPlayRunningNo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRoundId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRoundInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalPrizePool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"playCount\",\"type\":\"uint256\"}],\"internalType\":\"structGashapon.Round\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardRate\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isJackpot\",\"type\":\"bool\"}],\"internalType\":\"structGashapon.RewardRate[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"hasPlayed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playCountThresholdUpgrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hashedSecret\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_expireTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"playGasha\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playTopUp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomnesses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hashedSecret\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"secret\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"random\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardItemId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRefund\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playRunningNo\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playRunningNo\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_secret\",\"type\":\"string\"}],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isJackpot\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalPrizePool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"playCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setAdminSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bonusTopUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusPlayCountThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_specialTopUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_specialPlayCountThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_playCountThresholdUpgrade\",\"type\":\"uint256\"}],\"name\":\"setBonusAndSpecialTopUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_probabilities\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_jackpot\",\"type\":\"uint256\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_playTopUp\",\"type\":\"uint256\"}],\"name\":\"setTicketPriceAndPlayTopUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"specialPlayCountThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"specialTopUp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hashedSecret\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_expireTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"verifyPlayGashaSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6101406040523480156200001257600080fd5b50604051620028c6380380620028c683398101604081905262000035916200031c565b8686620000423362000130565b815160209283012081519183019190912060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818801819052818301969096526060810194909452608080850193909352308483018190528151808603909301835260c09485019091528151919095012090529190915261012052620000de60003362000182565b600580546001600160a01b03199081166001600160a01b0396871617909155600680548216948616949094179093556007805490931694909316939093179055600a91909155600b5550620003d19050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6200018e828262000192565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166200018e576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001ee3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200025a57600080fd5b81516001600160401b038082111562000277576200027762000232565b604051601f8301601f19908116603f01168101908282118183101715620002a257620002a262000232565b81604052838152602092508683858801011115620002bf57600080fd5b600091505b83821015620002e35785820183015181830184015290820190620002c4565b83821115620002f55760008385830101525b9695505050505050565b80516001600160a01b03811681146200031757600080fd5b919050565b600080600080600080600060e0888a0312156200033857600080fd5b87516001600160401b03808211156200035057600080fd5b6200035e8b838c0162000248565b985060208a01519150808211156200037557600080fd5b50620003848a828b0162000248565b9650506200039560408901620002ff565b9450620003a560608901620002ff565b9350620003b560808901620002ff565b925060a0880151915060c0880151905092959891949750929550565b60805160a05160c05160e05161010051610120516124a56200042160003960006116cb0152600061171a015260006116f50152600061164e01526000611678015260006116a201526124a56000f3fe608060405234801561001057600080fd5b50600436106102695760003560e01c806375b238fc11610151578063be9fb0b7116100c3578063ec09a97911610087578063ec09a9791461059d578063f0f44260146105b0578063f2caeb1e146105c3578063f2fde38b146105f3578063fc0c546a14610606578063ff9d2dcc1461061957600080fd5b8063be9fb0b714610566578063c1cb35161461056f578063cfb47a4514610578578063d547741f14610581578063e03541021461059457600080fd5b80638d96c464116101155780638d96c464146104e75780638da5cb5b1461050a57806391d148541461051b5780639cbe5efd1461052e578063a217fddf14610537578063b69231861461053f57600080fd5b806375b238fc1461045b5780637e1a3786146104705780637e98584b1461048557806385d3a5a5146104985780638c65c81f146104ab57600080fd5b8063315efde0116101ea57806369e8a94d116101ae57806369e8a94d146103a65780636fafca95146103b9578063715018a6146103cc5780637293fe94146103d457806373d90acb146103fb578063747dff421461040e57600080fd5b8063315efde01461034357806336568abe1461034c5780634c501ea81461035f5780635e46a6901461036857806361d027b31461037b57600080fd5b8063216c47f511610231578063216c47f5146102de578063248a9ca3146102e7578063278ecde11461030a5780632f2ff15d1461031d5780632fa4548b1461033057600080fd5b806301ffc9a71461026e5780630ebdc65d146102965780631209b1f6146102ad578063183bbe80146102b657806318fde2ff146102cb575b600080fd5b61028161027c366004611dd4565b61062c565b60405190151581526020015b60405180910390f35b61029f600c5481565b60405190815260200161028d565b61029f600a5481565b6102c96102c4366004611e1a565b610663565b005b6102c96102d9366004611e7a565b61068d565b61029f600e5481565b61029f6102f5366004611eee565b60009081526020819052604090206001015490565b6102c9610318366004611eee565b61087a565b6102c961032b366004611f07565b610975565b6102c961033e366004611fd6565b61099f565b61029f61271081565b6102c961035a366004611f07565b610b43565b61029f60105481565b6102c961037636600461201d565b610bc6565b60065461038e906001600160a01b031681565b6040516001600160a01b03909116815260200161028d565b6102816103b4366004611fd6565b610bea565b6102816103c7366004611eee565b401590565b6102c9610bfe565b6103e76103e2366004611eee565b610c12565b60405161028d989796959493929190612097565b61029f610409366004611eee565b610ce9565b60408051808201825260008082526020918201819052600854815260028252829020825180840184528154808252600190920154908301908152835191825251918101919091520161028d565b61029f60008051602061245083398151915281565b610478610cf4565b60405161028d91906120f1565b6102c961049336600461214c565b610d72565b6102c96104a63660046121cc565b610ebb565b6104d26104b9366004611eee565b6002602052600090815260409020805460019091015482565b6040805192835260208301919091520161028d565b6102816104f5366004611eee565b60046020526000908152604090205460ff1681565b6001546001600160a01b031661038e565b610281610529366004611f07565b610eeb565b61029f60085481565b61029f600081565b61029f7fdafc38ea7c2e3d3ac713cfbf8a3603e528023311e9ae1b89c282d6e4d5a8612b81565b61029f60095481565b61029f600f5481565b61029f600d5481565b6102c961058f366004611f07565b610f14565b61029f600b5481565b6102816105ab36600461214c565b610f39565b6102c96105be366004611e1a565b610ff6565b6105d66105d1366004611eee565b611020565b60408051938452602084019290925215159082015260600161028d565b6102c9610601366004611e1a565b611056565b60055461038e906001600160a01b031681565b60075461038e906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b148061065d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b61066b6110cf565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000805160206124508339815191526106a581611129565b84838082146106c75760405163251f56a160e21b815260040160405180910390fd5b6106d360116000611cf3565b601154825b818110156107255760118054806106f1576106f1612207565b600082815260208120600360001990930192830201818155600181810192909255600201805460ff191690559155016106d8565b506000805b8481101561086d5760008b8b838181106107465761074661221d565b90506020020135905060008a8a848181106107635761076361221d565b905060200201359050600089831461077c57600061077f565b60015b60408051606081018252858152602081018581528315159282019283526011805460018101825560009190915291517f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68600390930292830155517f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c6982015590517f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c6a909101805460ff1916911515919091179055905081851180610843575061271082115b1561086157604051631ddde97960e31b815260040160405180910390fd5b5092505060010161072a565b5050505050505050505050565b60008181526003602081905260409091209081015440156108ae57604051636d61f14f60e01b815260040160405180910390fd5b600781015460ff16156108d45760405163542f378d60e11b815260040160405180910390fd5b6004810154156108f75760405163a89ac15160e01b815260040160405180910390fd5b60078101805460ff191660011790556006548154600a5460055461092d936001600160a01b039182169390821692911690611133565b8054604080518481526001600160a01b0390921660208301527f510b82fea70ff89a8cc73cd7f29db2d7b480134c160cb52a258797b42d1989ad910160405180910390a15050565b60008281526020819052604090206001015461099081611129565b61099a8383611193565b505050565b6000805160206124508339815191526109b781611129565b600083815260036020819052604090912090810154406109ea5760405163c212ef7d60e01b815260040160405180910390fd5b6109f8816001015484610bea565b610a1557604051635549aec760e11b815260040160405180910390fd5b60038101544060008080610a298785611217565b89519295509093509150610a4690600287019060208a0190611d14565b5060048501849055600585018390556006850182905560085460009081526002602052604081206001018054610a8a9290610a8090612249565b9182905550611361565b60085460009081526002602052604081208054909190610aab908490612264565b90915550506008546000908152600260205260409020548115610ade5760088054906000610ad883612249565b91905055505b600089815260036020526040908190205490517f10adcf11d1380037fa0e006be835b50827e2aeb3e86fd63d3f6740f76ab7833591610b30918c916001600160a01b03169088908d908990889061227c565b60405180910390a1505050505050505050565b6001600160a01b0381163314610bb85760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610bc282826113bd565b5050565b600080516020612450833981519152610bde81611129565b50600a91909155600b55565b600082610bf683611422565b149392505050565b610c066110cf565b610c106000611452565b565b6003602052600090815260409020805460018201546002830180546001600160a01b03909316939192610c44906122be565b80601f0160208091040260200160405190810160405280929190818152602001828054610c70906122be565b8015610cbd5780601f10610c9257610100808354040283529160200191610cbd565b820191906000526020600020905b815481529060010190602001808311610ca057829003601f168201915b505050600384015460048501546005860154600687015460079097015495969295919450925060ff1688565b600061065d82611361565b60606011805480602002602001604051908101604052809291908181526020016000905b82821015610d695760008481526020908190206040805160608101825260038602909201805483526001808201548486015260029091015460ff161515918301919091529083529092019101610d18565b50505050905090565b60008481526004602052604090205460ff1615610da2576040516329322ba360e11b815260040160405180910390fd5b610dae84848484610f39565b610dcb57604051638baa579f60e01b815260040160405180910390fd5b82421115610dec57604051635d58cdf360e01b815260040160405180910390fd5b6000848152600460205260409020805460ff19166001179055600654600a54600554610e29926001600160a01b0391821692339290911690611133565b600980546001908101808355600090815260036020818152604080842080546001600160a01b03191633908117909155865485528185209095018a9055855484529283902043920191909155925481519081529283019190915281018590527f48200e8c35ec99d0da50738e30a23b1b2818fed2972233505f325a81c17ff0979060600160405180910390a150505050565b600080516020612450833981519152610ed381611129565b50600c94909455600d92909255600e55600f55601055565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600082815260208190526040902060010154610f2f81611129565b61099a83836113bd565b600754604080516020601f85018190048102820181019092528381526000926001600160a01b031691610fe19190869086908190840183828082843760009201919091525050604080517fdafc38ea7c2e3d3ac713cfbf8a3603e528023311e9ae1b89c282d6e4d5a8612b60208201529081018b9052606081018a9052610fdb92506080019050604051602081830303815290604052805190602001206114a4565b906114f2565b6001600160a01b03161490505b949350505050565b610ffe6110cf565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6011818154811061103057600080fd5b600091825260209091206003909102018054600182015460029092015490925060ff1683565b61105e6110cf565b6001600160a01b0381166110c35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610baf565b6110cc81611452565b50565b6001546001600160a01b03163314610c105760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610baf565b6110cc8133611516565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261118d90859061156f565b50505050565b61119d8282610eeb565b610bc2576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556111d33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000806000848460405160200161122f9291906122f9565b60408051601f1981840301815282825280516020918201206011805480840286018401909452838552909650600093929091849084015b828210156112b75760008481526020908190206040805160608101825260038602909201805483526001808201548486015260029091015460ff161515918301919091529083529092019101611266565b50508251929350600091506112d090506127108761231b565b905060005b828110156113565760008482815181106112f1576112f161221d565b60200260200101516020015190508083101561134d578482815181106113195761131961221d565b60200260200101516000015196508482815181106113395761133961221d565b602002602001015160400151955050611356565b506001016112d5565b505050509250925092565b600b546010546000919083111561139857600f5461137f908461231b565b61139357600e546113909082612264565b90505b61065d565b600d546113a5908461231b565b61065d57600c546113b69082612264565b9392505050565b6113c78282610eeb565b15610bc2576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600081604051602001611435919061233d565b604051602081830303815290604052805190602001209050919050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061065d6114b1611641565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60008060006115018585611768565b9150915061150e816117ae565b509392505050565b6115208282610eeb565b610bc25761152d816118fc565b61153883602061190e565b604051602001611549929190612350565b60408051601f198184030181529082905262461bcd60e51b8252610baf9160040161233d565b60006115c4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611aaa9092919063ffffffff16565b80519091501561099a57808060200190518101906115e291906123c5565b61099a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610baf565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561169a57507f000000000000000000000000000000000000000000000000000000000000000046145b156116c457507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b60008082516041141561179f5760208301516040840151606085015160001a61179387828585611ab9565b945094505050506117a7565b506000905060025b9250929050565b60008160048111156117c2576117c26123e7565b14156117cb5750565b60018160048111156117df576117df6123e7565b141561182d5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610baf565b6002816004811115611841576118416123e7565b141561188f5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610baf565b60038160048111156118a3576118a36123e7565b14156110cc5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610baf565b606061065d6001600160a01b03831660145b6060600061191d8360026123fd565b611928906002612264565b67ffffffffffffffff81111561194057611940611f33565b6040519080825280601f01601f19166020018201604052801561196a576020820181803683370190505b509050600360fc1b816000815181106119855761198561221d565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106119b4576119b461221d565b60200101906001600160f81b031916908160001a90535060006119d88460026123fd565b6119e3906001612264565b90505b6001811115611a5b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611a1757611a1761221d565b1a60f81b828281518110611a2d57611a2d61221d565b60200101906001600160f81b031916908160001a90535060049490941c93611a548161241c565b90506119e6565b5083156113b65760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610baf565b6060610fee8484600085611b7d565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611af05750600090506003611b74565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611b44573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611b6d57600060019250925050611b74565b9150600090505b94509492505050565b606082471015611bde5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610baf565b600080866001600160a01b03168587604051611bfa9190612433565b60006040518083038185875af1925050503d8060008114611c37576040519150601f19603f3d011682016040523d82523d6000602084013e611c3c565b606091505b5091509150611c4d87838387611c58565b979650505050505050565b60608315611cc4578251611cbd576001600160a01b0385163b611cbd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610baf565b5081610fee565b610fee8383815115611cd95781518083602001fd5b8060405162461bcd60e51b8152600401610baf919061233d565b50805460008255600302906000526020600020908101906110cc9190611d98565b828054611d20906122be565b90600052602060002090601f016020900481019282611d425760008555611d88565b82601f10611d5b57805160ff1916838001178555611d88565b82800160010185558215611d88579182015b82811115611d88578251825591602001919060010190611d6d565b50611d94929150611dbf565b5090565b5b80821115611d94576000808255600182015560028101805460ff19169055600301611d99565b5b80821115611d945760008155600101611dc0565b600060208284031215611de657600080fd5b81356001600160e01b0319811681146113b657600080fd5b80356001600160a01b0381168114611e1557600080fd5b919050565b600060208284031215611e2c57600080fd5b6113b682611dfe565b60008083601f840112611e4757600080fd5b50813567ffffffffffffffff811115611e5f57600080fd5b6020830191508360208260051b85010111156117a757600080fd5b600080600080600060608688031215611e9257600080fd5b853567ffffffffffffffff80821115611eaa57600080fd5b611eb689838a01611e35565b90975095506020880135915080821115611ecf57600080fd5b50611edc88828901611e35565b96999598509660400135949350505050565b600060208284031215611f0057600080fd5b5035919050565b60008060408385031215611f1a57600080fd5b82359150611f2a60208401611dfe565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611f5a57600080fd5b813567ffffffffffffffff80821115611f7557611f75611f33565b604051601f8301601f19908116603f01168101908282118183101715611f9d57611f9d611f33565b81604052838152866020858801011115611fb657600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215611fe957600080fd5b82359150602083013567ffffffffffffffff81111561200757600080fd5b61201385828601611f49565b9150509250929050565b6000806040838503121561203057600080fd5b50508035926020909101359150565b60005b8381101561205a578181015183820152602001612042565b8381111561118d5750506000910152565b6000815180845261208381602086016020860161203f565b601f01601f19169290920160200192915050565b6001600160a01b038916815260208101889052610100604082018190526000906120c38382018a61206b565b60608401989098525050608081019490945260a084019290925260c0830152151560e0909101529392505050565b602080825282518282018190526000919060409081850190868401855b8281101561213f5781518051855286810151878601528501511515858501526060909301929085019060010161210e565b5091979650505050505050565b6000806000806060858703121561216257600080fd5b8435935060208501359250604085013567ffffffffffffffff8082111561218857600080fd5b818701915087601f83011261219c57600080fd5b8135818111156121ab57600080fd5b8860208285010111156121bd57600080fd5b95989497505060200194505050565b600080600080600060a086880312156121e457600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561225d5761225d612233565b5060010190565b6000821982111561227757612277612233565b500190565b86815260018060a01b038616602082015284604082015260c0606082015260006122a960c083018661206b565b60808301949094525060a00152949350505050565b600181811c908216806122d257607f821691505b602082108114156122f357634e487b7160e01b600052602260045260246000fd5b50919050565b60408152600061230c604083018561206b565b90508260208301529392505050565b60008261233857634e487b7160e01b600052601260045260246000fd5b500690565b6020815260006113b6602083018461206b565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161238881601785016020880161203f565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516123b981602884016020880161203f565b01602801949350505050565b6000602082840312156123d757600080fd5b815180151581146113b657600080fd5b634e487b7160e01b600052602160045260246000fd5b600081600019048311821515161561241757612417612233565b500290565b60008161242b5761242b612233565b506000190190565b6000825161244581846020870161203f565b919091019291505056fea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220bf88134a65809a040c6f59019c0fbbfeb5ce0d28ab3cc46f89ca850f9aa879c964736f6c634300080b0033",
}

// GashaponABI is the input ABI used to generate the binding from.
// Deprecated: Use GashaponMetaData.ABI instead.
var GashaponABI = GashaponMetaData.ABI

// GashaponBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use GashaponMetaData.Bin instead.
var GashaponBin = GashaponMetaData.Bin

// DeployGashapon deploys a new Ethereum contract, binding an instance of Gashapon to it.
func DeployGashapon(auth *bind.TransactOpts, backend bind.ContractBackend, _name string, _version string, _signer common.Address, _token common.Address, _treasury common.Address, _ticketPrice *big.Int, _playTopUp *big.Int) (common.Address, *types.Transaction, *Gashapon, error) {
	parsed, err := GashaponMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(GashaponBin), backend, _name, _version, _signer, _token, _treasury, _ticketPrice, _playTopUp)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Gashapon{GashaponCaller: GashaponCaller{contract: contract}, GashaponTransactor: GashaponTransactor{contract: contract}, GashaponFilterer: GashaponFilterer{contract: contract}}, nil
}

// Gashapon is an auto generated Go binding around an Ethereum contract.
type Gashapon struct {
	GashaponCaller     // Read-only binding to the contract
	GashaponTransactor // Write-only binding to the contract
	GashaponFilterer   // Log filterer for contract events
}

// GashaponCaller is an auto generated read-only Go binding around an Ethereum contract.
type GashaponCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GashaponTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GashaponTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GashaponFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GashaponFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GashaponSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GashaponSession struct {
	Contract     *Gashapon         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GashaponCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GashaponCallerSession struct {
	Contract *GashaponCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// GashaponTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GashaponTransactorSession struct {
	Contract     *GashaponTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// GashaponRaw is an auto generated low-level Go binding around an Ethereum contract.
type GashaponRaw struct {
	Contract *Gashapon // Generic contract binding to access the raw methods on
}

// GashaponCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GashaponCallerRaw struct {
	Contract *GashaponCaller // Generic read-only contract binding to access the raw methods on
}

// GashaponTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GashaponTransactorRaw struct {
	Contract *GashaponTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGashapon creates a new instance of Gashapon, bound to a specific deployed contract.
func NewGashapon(address common.Address, backend bind.ContractBackend) (*Gashapon, error) {
	contract, err := bindGashapon(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Gashapon{GashaponCaller: GashaponCaller{contract: contract}, GashaponTransactor: GashaponTransactor{contract: contract}, GashaponFilterer: GashaponFilterer{contract: contract}}, nil
}

// NewGashaponCaller creates a new read-only instance of Gashapon, bound to a specific deployed contract.
func NewGashaponCaller(address common.Address, caller bind.ContractCaller) (*GashaponCaller, error) {
	contract, err := bindGashapon(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GashaponCaller{contract: contract}, nil
}

// NewGashaponTransactor creates a new write-only instance of Gashapon, bound to a specific deployed contract.
func NewGashaponTransactor(address common.Address, transactor bind.ContractTransactor) (*GashaponTransactor, error) {
	contract, err := bindGashapon(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GashaponTransactor{contract: contract}, nil
}

// NewGashaponFilterer creates a new log filterer instance of Gashapon, bound to a specific deployed contract.
func NewGashaponFilterer(address common.Address, filterer bind.ContractFilterer) (*GashaponFilterer, error) {
	contract, err := bindGashapon(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GashaponFilterer{contract: contract}, nil
}

// bindGashapon binds a generic wrapper to an already deployed contract.
func bindGashapon(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := GashaponMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Gashapon *GashaponRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Gashapon.Contract.GashaponCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Gashapon *GashaponRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gashapon.Contract.GashaponTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Gashapon *GashaponRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Gashapon.Contract.GashaponTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Gashapon *GashaponCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Gashapon.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Gashapon *GashaponTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gashapon.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Gashapon *GashaponTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Gashapon.Contract.contract.Transact(opts, method, params...)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_Gashapon *GashaponCaller) ADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Gashapon.contract.Call(opts, &out, "ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_Gashapon *GashaponSession) ADMINROLE() ([32]byte, error) {
	return _Gashapon.Contract.ADMINROLE(&_Gashapon.CallOpts)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_Gashapon *GashaponCallerSession) ADMINROLE() ([32]byte, error) {
	return _Gashapon.Contract.ADMINROLE(&_Gashapon.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Gashapon *GashaponCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Gashapon.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Gashapon *GashaponSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Gashapon.Contract.DEFAULTADMINROLE(&_Gashapon.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Gashapon *GashaponCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Gashapon.Contract.DEFAULTADMINROLE(&_Gashapon.CallOpts)
}

// PLAYGASHATYPEHASH is a free data retrieval call binding the contract method 0xb6923186.
//
// Solidity: function PLAYGASHA_TYPEHASH() view returns(bytes32)
func (_Gashapon *GashaponCaller) PLAYGASHATYPEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Gashapon.contract.Call(opts, &out, "PLAYGASHA_TYPEHASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PLAYGASHATYPEHASH is a free data retrieval call binding the contract method 0xb6923186.
//
// Solidity: function PLAYGASHA_TYPEHASH() view returns(bytes32)
func (_Gashapon *GashaponSession) PLAYGASHATYPEHASH() ([32]byte, error) {
	return _Gashapon.Contract.PLAYGASHATYPEHASH(&_Gashapon.CallOpts)
}

// PLAYGASHATYPEHASH is a free data retrieval call binding the contract method 0xb6923186.
//
// Solidity: function PLAYGASHA_TYPEHASH() view returns(bytes32)
func (_Gashapon *GashaponCallerSession) PLAYGASHATYPEHASH() ([32]byte, error) {
	return _Gashapon.Contract.PLAYGASHATYPEHASH(&_Gashapon.CallOpts)
}

// PROBABILITYRATE is a free data retrieval call binding the contract method 0x315efde0.
//
// Solidity: function PROBABILITY_RATE() view returns(uint256)
func (_Gashapon *GashaponCaller) PROBABILITYRATE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Gashapon.contract.Call(opts, &out, "PROBABILITY_RATE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PROBABILITYRATE is a free data retrieval call binding the contract method 0x315efde0.
//
// Solidity: function PROBABILITY_RATE() view returns(uint256)
func (_Gashapon *GashaponSession) PROBABILITYRATE() (*big.Int, error) {
	return _Gashapon.Contract.PROBABILITYRATE(&_Gashapon.CallOpts)
}

// PROBABILITYRATE is a free data retrieval call binding the contract method 0x315efde0.
//
// Solidity: function PROBABILITY_RATE() view returns(uint256)
func (_Gashapon *GashaponCallerSession) PROBABILITYRATE() (*big.Int, error) {
	return _Gashapon.Contract.PROBABILITYRATE(&_Gashapon.CallOpts)
}

// AdminSigner is a free data retrieval call binding the contract method 0xff9d2dcc.
//
// Solidity: function adminSigner() view returns(address)
func (_Gashapon *GashaponCaller) AdminSigner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Gashapon.contract.Call(opts, &out, "adminSigner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AdminSigner is a free data retrieval call binding the contract method 0xff9d2dcc.
//
// Solidity: function adminSigner() view returns(address)
func (_Gashapon *GashaponSession) AdminSigner() (common.Address, error) {
	return _Gashapon.Contract.AdminSigner(&_Gashapon.CallOpts)
}

// AdminSigner is a free data retrieval call binding the contract method 0xff9d2dcc.
//
// Solidity: function adminSigner() view returns(address)
func (_Gashapon *GashaponCallerSession) AdminSigner() (common.Address, error) {
	return _Gashapon.Contract.AdminSigner(&_Gashapon.CallOpts)
}

// BonusPlayCountThreshold is a free data retrieval call binding the contract method 0xcfb47a45.
//
// Solidity: function bonusPlayCountThreshold() view returns(uint256)
func (_Gashapon *GashaponCaller) BonusPlayCountThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Gashapon.contract.Call(opts, &out, "bonusPlayCountThreshold")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BonusPlayCountThreshold is a free data retrieval call binding the contract method 0xcfb47a45.
//
// Solidity: function bonusPlayCountThreshold() view returns(uint256)
func (_Gashapon *GashaponSession) BonusPlayCountThreshold() (*big.Int, error) {
	return _Gashapon.Contract.BonusPlayCountThreshold(&_Gashapon.CallOpts)
}

// BonusPlayCountThreshold is a free data retrieval call binding the contract method 0xcfb47a45.
//
// Solidity: function bonusPlayCountThreshold() view returns(uint256)
func (_Gashapon *GashaponCallerSession) BonusPlayCountThreshold() (*big.Int, error) {
	return _Gashapon.Contract.BonusPlayCountThreshold(&_Gashapon.CallOpts)
}

// BonusTopUp is a free data retrieval call binding the contract method 0x0ebdc65d.
//
// Solidity: function bonusTopUp() view returns(uint256)
func (_Gashapon *GashaponCaller) BonusTopUp(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Gashapon.contract.Call(opts, &out, "bonusTopUp")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BonusTopUp is a free data retrieval call binding the contract method 0x0ebdc65d.
//
// Solidity: function bonusTopUp() view returns(uint256)
func (_Gashapon *GashaponSession) BonusTopUp() (*big.Int, error) {
	return _Gashapon.Contract.BonusTopUp(&_Gashapon.CallOpts)
}

// BonusTopUp is a free data retrieval call binding the contract method 0x0ebdc65d.
//
// Solidity: function bonusTopUp() view returns(uint256)
func (_Gashapon *GashaponCallerSession) BonusTopUp() (*big.Int, error) {
	return _Gashapon.Contract.BonusTopUp(&_Gashapon.CallOpts)
}

// CalPlayTopUpPerTimes is a free data retrieval call binding the contract method 0x73d90acb.
//
// Solidity: function calPlayTopUpPerTimes(uint256 _count) view returns(uint256)
func (_Gashapon *GashaponCaller) CalPlayTopUpPerTimes(opts *bind.CallOpts, _count *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Gashapon.contract.Call(opts, &out, "calPlayTopUpPerTimes", _count)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CalPlayTopUpPerTimes is a free data retrieval call binding the contract method 0x73d90acb.
//
// Solidity: function calPlayTopUpPerTimes(uint256 _count) view returns(uint256)
func (_Gashapon *GashaponSession) CalPlayTopUpPerTimes(_count *big.Int) (*big.Int, error) {
	return _Gashapon.Contract.CalPlayTopUpPerTimes(&_Gashapon.CallOpts, _count)
}

// CalPlayTopUpPerTimes is a free data retrieval call binding the contract method 0x73d90acb.
//
// Solidity: function calPlayTopUpPerTimes(uint256 _count) view returns(uint256)
func (_Gashapon *GashaponCallerSession) CalPlayTopUpPerTimes(_count *big.Int) (*big.Int, error) {
	return _Gashapon.Contract.CalPlayTopUpPerTimes(&_Gashapon.CallOpts, _count)
}

// CheckBlockhashExpire is a free data retrieval call binding the contract method 0x6fafca95.
//
// Solidity: function checkBlockhashExpire(uint256 _blockNumber) view returns(bool)
func (_Gashapon *GashaponCaller) CheckBlockhashExpire(opts *bind.CallOpts, _blockNumber *big.Int) (bool, error) {
	var out []interface{}
	err := _Gashapon.contract.Call(opts, &out, "checkBlockhashExpire", _blockNumber)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckBlockhashExpire is a free data retrieval call binding the contract method 0x6fafca95.
//
// Solidity: function checkBlockhashExpire(uint256 _blockNumber) view returns(bool)
func (_Gashapon *GashaponSession) CheckBlockhashExpire(_blockNumber *big.Int) (bool, error) {
	return _Gashapon.Contract.CheckBlockhashExpire(&_Gashapon.CallOpts, _blockNumber)
}

// CheckBlockhashExpire is a free data retrieval call binding the contract method 0x6fafca95.
//
// Solidity: function checkBlockhashExpire(uint256 _blockNumber) view returns(bool)
func (_Gashapon *GashaponCallerSession) CheckBlockhashExpire(_blockNumber *big.Int) (bool, error) {
	return _Gashapon.Contract.CheckBlockhashExpire(&_Gashapon.CallOpts, _blockNumber)
}

// CheckHashedSecret is a free data retrieval call binding the contract method 0x69e8a94d.
//
// Solidity: function checkHashedSecret(bytes32 _hashedSecret, string _secret) pure returns(bool)
func (_Gashapon *GashaponCaller) CheckHashedSecret(opts *bind.CallOpts, _hashedSecret [32]byte, _secret string) (bool, error) {
	var out []interface{}
	err := _Gashapon.contract.Call(opts, &out, "checkHashedSecret", _hashedSecret, _secret)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckHashedSecret is a free data retrieval call binding the contract method 0x69e8a94d.
//
// Solidity: function checkHashedSecret(bytes32 _hashedSecret, string _secret) pure returns(bool)
func (_Gashapon *GashaponSession) CheckHashedSecret(_hashedSecret [32]byte, _secret string) (bool, error) {
	return _Gashapon.Contract.CheckHashedSecret(&_Gashapon.CallOpts, _hashedSecret, _secret)
}

// CheckHashedSecret is a free data retrieval call binding the contract method 0x69e8a94d.
//
// Solidity: function checkHashedSecret(bytes32 _hashedSecret, string _secret) pure returns(bool)
func (_Gashapon *GashaponCallerSession) CheckHashedSecret(_hashedSecret [32]byte, _secret string) (bool, error) {
	return _Gashapon.Contract.CheckHashedSecret(&_Gashapon.CallOpts, _hashedSecret, _secret)
}

// CurrentPlayRunningNo is a free data retrieval call binding the contract method 0xbe9fb0b7.
//
// Solidity: function currentPlayRunningNo() view returns(uint256)
func (_Gashapon *GashaponCaller) CurrentPlayRunningNo(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Gashapon.contract.Call(opts, &out, "currentPlayRunningNo")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentPlayRunningNo is a free data retrieval call binding the contract method 0xbe9fb0b7.
//
// Solidity: function currentPlayRunningNo() view returns(uint256)
func (_Gashapon *GashaponSession) CurrentPlayRunningNo() (*big.Int, error) {
	return _Gashapon.Contract.CurrentPlayRunningNo(&_Gashapon.CallOpts)
}

// CurrentPlayRunningNo is a free data retrieval call binding the contract method 0xbe9fb0b7.
//
// Solidity: function currentPlayRunningNo() view returns(uint256)
func (_Gashapon *GashaponCallerSession) CurrentPlayRunningNo() (*big.Int, error) {
	return _Gashapon.Contract.CurrentPlayRunningNo(&_Gashapon.CallOpts)
}

// CurrentRoundId is a free data retrieval call binding the contract method 0x9cbe5efd.
//
// Solidity: function currentRoundId() view returns(uint256)
func (_Gashapon *GashaponCaller) CurrentRoundId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Gashapon.contract.Call(opts, &out, "currentRoundId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentRoundId is a free data retrieval call binding the contract method 0x9cbe5efd.
//
// Solidity: function currentRoundId() view returns(uint256)
func (_Gashapon *GashaponSession) CurrentRoundId() (*big.Int, error) {
	return _Gashapon.Contract.CurrentRoundId(&_Gashapon.CallOpts)
}

// CurrentRoundId is a free data retrieval call binding the contract method 0x9cbe5efd.
//
// Solidity: function currentRoundId() view returns(uint256)
func (_Gashapon *GashaponCallerSession) CurrentRoundId() (*big.Int, error) {
	return _Gashapon.Contract.CurrentRoundId(&_Gashapon.CallOpts)
}

// GetCurrentRoundInfo is a free data retrieval call binding the contract method 0x747dff42.
//
// Solidity: function getCurrentRoundInfo() view returns((uint256,uint256))
func (_Gashapon *GashaponCaller) GetCurrentRoundInfo(opts *bind.CallOpts) (GashaponRound, error) {
	var out []interface{}
	err := _Gashapon.contract.Call(opts, &out, "getCurrentRoundInfo")

	if err != nil {
		return *new(GashaponRound), err
	}

	out0 := *abi.ConvertType(out[0], new(GashaponRound)).(*GashaponRound)

	return out0, err

}

// GetCurrentRoundInfo is a free data retrieval call binding the contract method 0x747dff42.
//
// Solidity: function getCurrentRoundInfo() view returns((uint256,uint256))
func (_Gashapon *GashaponSession) GetCurrentRoundInfo() (GashaponRound, error) {
	return _Gashapon.Contract.GetCurrentRoundInfo(&_Gashapon.CallOpts)
}

// GetCurrentRoundInfo is a free data retrieval call binding the contract method 0x747dff42.
//
// Solidity: function getCurrentRoundInfo() view returns((uint256,uint256))
func (_Gashapon *GashaponCallerSession) GetCurrentRoundInfo() (GashaponRound, error) {
	return _Gashapon.Contract.GetCurrentRoundInfo(&_Gashapon.CallOpts)
}

// GetRewardRate is a free data retrieval call binding the contract method 0x7e1a3786.
//
// Solidity: function getRewardRate() view returns((uint256,uint256,bool)[])
func (_Gashapon *GashaponCaller) GetRewardRate(opts *bind.CallOpts) ([]GashaponRewardRate, error) {
	var out []interface{}
	err := _Gashapon.contract.Call(opts, &out, "getRewardRate")

	if err != nil {
		return *new([]GashaponRewardRate), err
	}

	out0 := *abi.ConvertType(out[0], new([]GashaponRewardRate)).(*[]GashaponRewardRate)

	return out0, err

}

// GetRewardRate is a free data retrieval call binding the contract method 0x7e1a3786.
//
// Solidity: function getRewardRate() view returns((uint256,uint256,bool)[])
func (_Gashapon *GashaponSession) GetRewardRate() ([]GashaponRewardRate, error) {
	return _Gashapon.Contract.GetRewardRate(&_Gashapon.CallOpts)
}

// GetRewardRate is a free data retrieval call binding the contract method 0x7e1a3786.
//
// Solidity: function getRewardRate() view returns((uint256,uint256,bool)[])
func (_Gashapon *GashaponCallerSession) GetRewardRate() ([]GashaponRewardRate, error) {
	return _Gashapon.Contract.GetRewardRate(&_Gashapon.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Gashapon *GashaponCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Gashapon.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Gashapon *GashaponSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Gashapon.Contract.GetRoleAdmin(&_Gashapon.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Gashapon *GashaponCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Gashapon.Contract.GetRoleAdmin(&_Gashapon.CallOpts, role)
}

// HasPlayed is a free data retrieval call binding the contract method 0x8d96c464.
//
// Solidity: function hasPlayed(bytes32 ) view returns(bool)
func (_Gashapon *GashaponCaller) HasPlayed(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _Gashapon.contract.Call(opts, &out, "hasPlayed", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasPlayed is a free data retrieval call binding the contract method 0x8d96c464.
//
// Solidity: function hasPlayed(bytes32 ) view returns(bool)
func (_Gashapon *GashaponSession) HasPlayed(arg0 [32]byte) (bool, error) {
	return _Gashapon.Contract.HasPlayed(&_Gashapon.CallOpts, arg0)
}

// HasPlayed is a free data retrieval call binding the contract method 0x8d96c464.
//
// Solidity: function hasPlayed(bytes32 ) view returns(bool)
func (_Gashapon *GashaponCallerSession) HasPlayed(arg0 [32]byte) (bool, error) {
	return _Gashapon.Contract.HasPlayed(&_Gashapon.CallOpts, arg0)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Gashapon *GashaponCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _Gashapon.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Gashapon *GashaponSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Gashapon.Contract.HasRole(&_Gashapon.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Gashapon *GashaponCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Gashapon.Contract.HasRole(&_Gashapon.CallOpts, role, account)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Gashapon *GashaponCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Gashapon.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Gashapon *GashaponSession) Owner() (common.Address, error) {
	return _Gashapon.Contract.Owner(&_Gashapon.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Gashapon *GashaponCallerSession) Owner() (common.Address, error) {
	return _Gashapon.Contract.Owner(&_Gashapon.CallOpts)
}

// PlayCountThresholdUpgrade is a free data retrieval call binding the contract method 0x4c501ea8.
//
// Solidity: function playCountThresholdUpgrade() view returns(uint256)
func (_Gashapon *GashaponCaller) PlayCountThresholdUpgrade(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Gashapon.contract.Call(opts, &out, "playCountThresholdUpgrade")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PlayCountThresholdUpgrade is a free data retrieval call binding the contract method 0x4c501ea8.
//
// Solidity: function playCountThresholdUpgrade() view returns(uint256)
func (_Gashapon *GashaponSession) PlayCountThresholdUpgrade() (*big.Int, error) {
	return _Gashapon.Contract.PlayCountThresholdUpgrade(&_Gashapon.CallOpts)
}

// PlayCountThresholdUpgrade is a free data retrieval call binding the contract method 0x4c501ea8.
//
// Solidity: function playCountThresholdUpgrade() view returns(uint256)
func (_Gashapon *GashaponCallerSession) PlayCountThresholdUpgrade() (*big.Int, error) {
	return _Gashapon.Contract.PlayCountThresholdUpgrade(&_Gashapon.CallOpts)
}

// PlayTopUp is a free data retrieval call binding the contract method 0xe0354102.
//
// Solidity: function playTopUp() view returns(uint256)
func (_Gashapon *GashaponCaller) PlayTopUp(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Gashapon.contract.Call(opts, &out, "playTopUp")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PlayTopUp is a free data retrieval call binding the contract method 0xe0354102.
//
// Solidity: function playTopUp() view returns(uint256)
func (_Gashapon *GashaponSession) PlayTopUp() (*big.Int, error) {
	return _Gashapon.Contract.PlayTopUp(&_Gashapon.CallOpts)
}

// PlayTopUp is a free data retrieval call binding the contract method 0xe0354102.
//
// Solidity: function playTopUp() view returns(uint256)
func (_Gashapon *GashaponCallerSession) PlayTopUp() (*big.Int, error) {
	return _Gashapon.Contract.PlayTopUp(&_Gashapon.CallOpts)
}

// Randomnesses is a free data retrieval call binding the contract method 0x7293fe94.
//
// Solidity: function randomnesses(uint256 ) view returns(address user, bytes32 hashedSecret, string secret, uint256 blockNumber, bytes32 blockHash, uint256 random, uint256 rewardItemId, bool isRefund)
func (_Gashapon *GashaponCaller) Randomnesses(opts *bind.CallOpts, arg0 *big.Int) (struct {
	User         common.Address
	HashedSecret [32]byte
	Secret       string
	BlockNumber  *big.Int
	BlockHash    [32]byte
	Random       *big.Int
	RewardItemId *big.Int
	IsRefund     bool
}, error) {
	var out []interface{}
	err := _Gashapon.contract.Call(opts, &out, "randomnesses", arg0)

	outstruct := new(struct {
		User         common.Address
		HashedSecret [32]byte
		Secret       string
		BlockNumber  *big.Int
		BlockHash    [32]byte
		Random       *big.Int
		RewardItemId *big.Int
		IsRefund     bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.User = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.HashedSecret = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Secret = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.BlockNumber = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.BlockHash = *abi.ConvertType(out[4], new([32]byte)).(*[32]byte)
	outstruct.Random = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.RewardItemId = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)
	outstruct.IsRefund = *abi.ConvertType(out[7], new(bool)).(*bool)

	return *outstruct, err

}

// Randomnesses is a free data retrieval call binding the contract method 0x7293fe94.
//
// Solidity: function randomnesses(uint256 ) view returns(address user, bytes32 hashedSecret, string secret, uint256 blockNumber, bytes32 blockHash, uint256 random, uint256 rewardItemId, bool isRefund)
func (_Gashapon *GashaponSession) Randomnesses(arg0 *big.Int) (struct {
	User         common.Address
	HashedSecret [32]byte
	Secret       string
	BlockNumber  *big.Int
	BlockHash    [32]byte
	Random       *big.Int
	RewardItemId *big.Int
	IsRefund     bool
}, error) {
	return _Gashapon.Contract.Randomnesses(&_Gashapon.CallOpts, arg0)
}

// Randomnesses is a free data retrieval call binding the contract method 0x7293fe94.
//
// Solidity: function randomnesses(uint256 ) view returns(address user, bytes32 hashedSecret, string secret, uint256 blockNumber, bytes32 blockHash, uint256 random, uint256 rewardItemId, bool isRefund)
func (_Gashapon *GashaponCallerSession) Randomnesses(arg0 *big.Int) (struct {
	User         common.Address
	HashedSecret [32]byte
	Secret       string
	BlockNumber  *big.Int
	BlockHash    [32]byte
	Random       *big.Int
	RewardItemId *big.Int
	IsRefund     bool
}, error) {
	return _Gashapon.Contract.Randomnesses(&_Gashapon.CallOpts, arg0)
}

// RewardRates is a free data retrieval call binding the contract method 0xf2caeb1e.
//
// Solidity: function rewardRates(uint256 ) view returns(uint256 itemId, uint256 probability, bool isJackpot)
func (_Gashapon *GashaponCaller) RewardRates(opts *bind.CallOpts, arg0 *big.Int) (struct {
	ItemId      *big.Int
	Probability *big.Int
	IsJackpot   bool
}, error) {
	var out []interface{}
	err := _Gashapon.contract.Call(opts, &out, "rewardRates", arg0)

	outstruct := new(struct {
		ItemId      *big.Int
		Probability *big.Int
		IsJackpot   bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ItemId = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Probability = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.IsJackpot = *abi.ConvertType(out[2], new(bool)).(*bool)

	return *outstruct, err

}

// RewardRates is a free data retrieval call binding the contract method 0xf2caeb1e.
//
// Solidity: function rewardRates(uint256 ) view returns(uint256 itemId, uint256 probability, bool isJackpot)
func (_Gashapon *GashaponSession) RewardRates(arg0 *big.Int) (struct {
	ItemId      *big.Int
	Probability *big.Int
	IsJackpot   bool
}, error) {
	return _Gashapon.Contract.RewardRates(&_Gashapon.CallOpts, arg0)
}

// RewardRates is a free data retrieval call binding the contract method 0xf2caeb1e.
//
// Solidity: function rewardRates(uint256 ) view returns(uint256 itemId, uint256 probability, bool isJackpot)
func (_Gashapon *GashaponCallerSession) RewardRates(arg0 *big.Int) (struct {
	ItemId      *big.Int
	Probability *big.Int
	IsJackpot   bool
}, error) {
	return _Gashapon.Contract.RewardRates(&_Gashapon.CallOpts, arg0)
}

// Rounds is a free data retrieval call binding the contract method 0x8c65c81f.
//
// Solidity: function rounds(uint256 ) view returns(uint256 totalPrizePool, uint256 playCount)
func (_Gashapon *GashaponCaller) Rounds(opts *bind.CallOpts, arg0 *big.Int) (struct {
	TotalPrizePool *big.Int
	PlayCount      *big.Int
}, error) {
	var out []interface{}
	err := _Gashapon.contract.Call(opts, &out, "rounds", arg0)

	outstruct := new(struct {
		TotalPrizePool *big.Int
		PlayCount      *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.TotalPrizePool = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.PlayCount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Rounds is a free data retrieval call binding the contract method 0x8c65c81f.
//
// Solidity: function rounds(uint256 ) view returns(uint256 totalPrizePool, uint256 playCount)
func (_Gashapon *GashaponSession) Rounds(arg0 *big.Int) (struct {
	TotalPrizePool *big.Int
	PlayCount      *big.Int
}, error) {
	return _Gashapon.Contract.Rounds(&_Gashapon.CallOpts, arg0)
}

// Rounds is a free data retrieval call binding the contract method 0x8c65c81f.
//
// Solidity: function rounds(uint256 ) view returns(uint256 totalPrizePool, uint256 playCount)
func (_Gashapon *GashaponCallerSession) Rounds(arg0 *big.Int) (struct {
	TotalPrizePool *big.Int
	PlayCount      *big.Int
}, error) {
	return _Gashapon.Contract.Rounds(&_Gashapon.CallOpts, arg0)
}

// SpecialPlayCountThreshold is a free data retrieval call binding the contract method 0xc1cb3516.
//
// Solidity: function specialPlayCountThreshold() view returns(uint256)
func (_Gashapon *GashaponCaller) SpecialPlayCountThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Gashapon.contract.Call(opts, &out, "specialPlayCountThreshold")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SpecialPlayCountThreshold is a free data retrieval call binding the contract method 0xc1cb3516.
//
// Solidity: function specialPlayCountThreshold() view returns(uint256)
func (_Gashapon *GashaponSession) SpecialPlayCountThreshold() (*big.Int, error) {
	return _Gashapon.Contract.SpecialPlayCountThreshold(&_Gashapon.CallOpts)
}

// SpecialPlayCountThreshold is a free data retrieval call binding the contract method 0xc1cb3516.
//
// Solidity: function specialPlayCountThreshold() view returns(uint256)
func (_Gashapon *GashaponCallerSession) SpecialPlayCountThreshold() (*big.Int, error) {
	return _Gashapon.Contract.SpecialPlayCountThreshold(&_Gashapon.CallOpts)
}

// SpecialTopUp is a free data retrieval call binding the contract method 0x216c47f5.
//
// Solidity: function specialTopUp() view returns(uint256)
func (_Gashapon *GashaponCaller) SpecialTopUp(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Gashapon.contract.Call(opts, &out, "specialTopUp")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SpecialTopUp is a free data retrieval call binding the contract method 0x216c47f5.
//
// Solidity: function specialTopUp() view returns(uint256)
func (_Gashapon *GashaponSession) SpecialTopUp() (*big.Int, error) {
	return _Gashapon.Contract.SpecialTopUp(&_Gashapon.CallOpts)
}

// SpecialTopUp is a free data retrieval call binding the contract method 0x216c47f5.
//
// Solidity: function specialTopUp() view returns(uint256)
func (_Gashapon *GashaponCallerSession) SpecialTopUp() (*big.Int, error) {
	return _Gashapon.Contract.SpecialTopUp(&_Gashapon.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Gashapon *GashaponCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Gashapon.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Gashapon *GashaponSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Gashapon.Contract.SupportsInterface(&_Gashapon.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Gashapon *GashaponCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Gashapon.Contract.SupportsInterface(&_Gashapon.CallOpts, interfaceId)
}

// TicketPrice is a free data retrieval call binding the contract method 0x1209b1f6.
//
// Solidity: function ticketPrice() view returns(uint256)
func (_Gashapon *GashaponCaller) TicketPrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Gashapon.contract.Call(opts, &out, "ticketPrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TicketPrice is a free data retrieval call binding the contract method 0x1209b1f6.
//
// Solidity: function ticketPrice() view returns(uint256)
func (_Gashapon *GashaponSession) TicketPrice() (*big.Int, error) {
	return _Gashapon.Contract.TicketPrice(&_Gashapon.CallOpts)
}

// TicketPrice is a free data retrieval call binding the contract method 0x1209b1f6.
//
// Solidity: function ticketPrice() view returns(uint256)
func (_Gashapon *GashaponCallerSession) TicketPrice() (*big.Int, error) {
	return _Gashapon.Contract.TicketPrice(&_Gashapon.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_Gashapon *GashaponCaller) Token(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Gashapon.contract.Call(opts, &out, "token")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_Gashapon *GashaponSession) Token() (common.Address, error) {
	return _Gashapon.Contract.Token(&_Gashapon.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_Gashapon *GashaponCallerSession) Token() (common.Address, error) {
	return _Gashapon.Contract.Token(&_Gashapon.CallOpts)
}

// Treasury is a free data retrieval call binding the contract method 0x61d027b3.
//
// Solidity: function treasury() view returns(address)
func (_Gashapon *GashaponCaller) Treasury(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Gashapon.contract.Call(opts, &out, "treasury")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Treasury is a free data retrieval call binding the contract method 0x61d027b3.
//
// Solidity: function treasury() view returns(address)
func (_Gashapon *GashaponSession) Treasury() (common.Address, error) {
	return _Gashapon.Contract.Treasury(&_Gashapon.CallOpts)
}

// Treasury is a free data retrieval call binding the contract method 0x61d027b3.
//
// Solidity: function treasury() view returns(address)
func (_Gashapon *GashaponCallerSession) Treasury() (common.Address, error) {
	return _Gashapon.Contract.Treasury(&_Gashapon.CallOpts)
}

// VerifyPlayGashaSignature is a free data retrieval call binding the contract method 0xec09a979.
//
// Solidity: function verifyPlayGashaSignature(bytes32 _hashedSecret, uint256 _expireTime, bytes _signature) view returns(bool)
func (_Gashapon *GashaponCaller) VerifyPlayGashaSignature(opts *bind.CallOpts, _hashedSecret [32]byte, _expireTime *big.Int, _signature []byte) (bool, error) {
	var out []interface{}
	err := _Gashapon.contract.Call(opts, &out, "verifyPlayGashaSignature", _hashedSecret, _expireTime, _signature)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyPlayGashaSignature is a free data retrieval call binding the contract method 0xec09a979.
//
// Solidity: function verifyPlayGashaSignature(bytes32 _hashedSecret, uint256 _expireTime, bytes _signature) view returns(bool)
func (_Gashapon *GashaponSession) VerifyPlayGashaSignature(_hashedSecret [32]byte, _expireTime *big.Int, _signature []byte) (bool, error) {
	return _Gashapon.Contract.VerifyPlayGashaSignature(&_Gashapon.CallOpts, _hashedSecret, _expireTime, _signature)
}

// VerifyPlayGashaSignature is a free data retrieval call binding the contract method 0xec09a979.
//
// Solidity: function verifyPlayGashaSignature(bytes32 _hashedSecret, uint256 _expireTime, bytes _signature) view returns(bool)
func (_Gashapon *GashaponCallerSession) VerifyPlayGashaSignature(_hashedSecret [32]byte, _expireTime *big.Int, _signature []byte) (bool, error) {
	return _Gashapon.Contract.VerifyPlayGashaSignature(&_Gashapon.CallOpts, _hashedSecret, _expireTime, _signature)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Gashapon *GashaponTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Gashapon.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Gashapon *GashaponSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Gashapon.Contract.GrantRole(&_Gashapon.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Gashapon *GashaponTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Gashapon.Contract.GrantRole(&_Gashapon.TransactOpts, role, account)
}

// PlayGasha is a paid mutator transaction binding the contract method 0x7e98584b.
//
// Solidity: function playGasha(bytes32 _hashedSecret, uint256 _expireTime, bytes _signature) returns()
func (_Gashapon *GashaponTransactor) PlayGasha(opts *bind.TransactOpts, _hashedSecret [32]byte, _expireTime *big.Int, _signature []byte) (*types.Transaction, error) {
	return _Gashapon.contract.Transact(opts, "playGasha", _hashedSecret, _expireTime, _signature)
}

// PlayGasha is a paid mutator transaction binding the contract method 0x7e98584b.
//
// Solidity: function playGasha(bytes32 _hashedSecret, uint256 _expireTime, bytes _signature) returns()
func (_Gashapon *GashaponSession) PlayGasha(_hashedSecret [32]byte, _expireTime *big.Int, _signature []byte) (*types.Transaction, error) {
	return _Gashapon.Contract.PlayGasha(&_Gashapon.TransactOpts, _hashedSecret, _expireTime, _signature)
}

// PlayGasha is a paid mutator transaction binding the contract method 0x7e98584b.
//
// Solidity: function playGasha(bytes32 _hashedSecret, uint256 _expireTime, bytes _signature) returns()
func (_Gashapon *GashaponTransactorSession) PlayGasha(_hashedSecret [32]byte, _expireTime *big.Int, _signature []byte) (*types.Transaction, error) {
	return _Gashapon.Contract.PlayGasha(&_Gashapon.TransactOpts, _hashedSecret, _expireTime, _signature)
}

// Refund is a paid mutator transaction binding the contract method 0x278ecde1.
//
// Solidity: function refund(uint256 _playRunningNo) returns()
func (_Gashapon *GashaponTransactor) Refund(opts *bind.TransactOpts, _playRunningNo *big.Int) (*types.Transaction, error) {
	return _Gashapon.contract.Transact(opts, "refund", _playRunningNo)
}

// Refund is a paid mutator transaction binding the contract method 0x278ecde1.
//
// Solidity: function refund(uint256 _playRunningNo) returns()
func (_Gashapon *GashaponSession) Refund(_playRunningNo *big.Int) (*types.Transaction, error) {
	return _Gashapon.Contract.Refund(&_Gashapon.TransactOpts, _playRunningNo)
}

// Refund is a paid mutator transaction binding the contract method 0x278ecde1.
//
// Solidity: function refund(uint256 _playRunningNo) returns()
func (_Gashapon *GashaponTransactorSession) Refund(_playRunningNo *big.Int) (*types.Transaction, error) {
	return _Gashapon.Contract.Refund(&_Gashapon.TransactOpts, _playRunningNo)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Gashapon *GashaponTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gashapon.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Gashapon *GashaponSession) RenounceOwnership() (*types.Transaction, error) {
	return _Gashapon.Contract.RenounceOwnership(&_Gashapon.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Gashapon *GashaponTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Gashapon.Contract.RenounceOwnership(&_Gashapon.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Gashapon *GashaponTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Gashapon.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Gashapon *GashaponSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Gashapon.Contract.RenounceRole(&_Gashapon.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Gashapon *GashaponTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Gashapon.Contract.RenounceRole(&_Gashapon.TransactOpts, role, account)
}

// Reveal is a paid mutator transaction binding the contract method 0x2fa4548b.
//
// Solidity: function reveal(uint256 _playRunningNo, string _secret) returns()
func (_Gashapon *GashaponTransactor) Reveal(opts *bind.TransactOpts, _playRunningNo *big.Int, _secret string) (*types.Transaction, error) {
	return _Gashapon.contract.Transact(opts, "reveal", _playRunningNo, _secret)
}

// Reveal is a paid mutator transaction binding the contract method 0x2fa4548b.
//
// Solidity: function reveal(uint256 _playRunningNo, string _secret) returns()
func (_Gashapon *GashaponSession) Reveal(_playRunningNo *big.Int, _secret string) (*types.Transaction, error) {
	return _Gashapon.Contract.Reveal(&_Gashapon.TransactOpts, _playRunningNo, _secret)
}

// Reveal is a paid mutator transaction binding the contract method 0x2fa4548b.
//
// Solidity: function reveal(uint256 _playRunningNo, string _secret) returns()
func (_Gashapon *GashaponTransactorSession) Reveal(_playRunningNo *big.Int, _secret string) (*types.Transaction, error) {
	return _Gashapon.Contract.Reveal(&_Gashapon.TransactOpts, _playRunningNo, _secret)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Gashapon *GashaponTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Gashapon.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Gashapon *GashaponSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Gashapon.Contract.RevokeRole(&_Gashapon.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Gashapon *GashaponTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Gashapon.Contract.RevokeRole(&_Gashapon.TransactOpts, role, account)
}

// SetAdminSigner is a paid mutator transaction binding the contract method 0x183bbe80.
//
// Solidity: function setAdminSigner(address _signer) returns()
func (_Gashapon *GashaponTransactor) SetAdminSigner(opts *bind.TransactOpts, _signer common.Address) (*types.Transaction, error) {
	return _Gashapon.contract.Transact(opts, "setAdminSigner", _signer)
}

// SetAdminSigner is a paid mutator transaction binding the contract method 0x183bbe80.
//
// Solidity: function setAdminSigner(address _signer) returns()
func (_Gashapon *GashaponSession) SetAdminSigner(_signer common.Address) (*types.Transaction, error) {
	return _Gashapon.Contract.SetAdminSigner(&_Gashapon.TransactOpts, _signer)
}

// SetAdminSigner is a paid mutator transaction binding the contract method 0x183bbe80.
//
// Solidity: function setAdminSigner(address _signer) returns()
func (_Gashapon *GashaponTransactorSession) SetAdminSigner(_signer common.Address) (*types.Transaction, error) {
	return _Gashapon.Contract.SetAdminSigner(&_Gashapon.TransactOpts, _signer)
}

// SetBonusAndSpecialTopUp is a paid mutator transaction binding the contract method 0x85d3a5a5.
//
// Solidity: function setBonusAndSpecialTopUp(uint256 _bonusTopUp, uint256 _bonusPlayCountThreshold, uint256 _specialTopUp, uint256 _specialPlayCountThreshold, uint256 _playCountThresholdUpgrade) returns()
func (_Gashapon *GashaponTransactor) SetBonusAndSpecialTopUp(opts *bind.TransactOpts, _bonusTopUp *big.Int, _bonusPlayCountThreshold *big.Int, _specialTopUp *big.Int, _specialPlayCountThreshold *big.Int, _playCountThresholdUpgrade *big.Int) (*types.Transaction, error) {
	return _Gashapon.contract.Transact(opts, "setBonusAndSpecialTopUp", _bonusTopUp, _bonusPlayCountThreshold, _specialTopUp, _specialPlayCountThreshold, _playCountThresholdUpgrade)
}

// SetBonusAndSpecialTopUp is a paid mutator transaction binding the contract method 0x85d3a5a5.
//
// Solidity: function setBonusAndSpecialTopUp(uint256 _bonusTopUp, uint256 _bonusPlayCountThreshold, uint256 _specialTopUp, uint256 _specialPlayCountThreshold, uint256 _playCountThresholdUpgrade) returns()
func (_Gashapon *GashaponSession) SetBonusAndSpecialTopUp(_bonusTopUp *big.Int, _bonusPlayCountThreshold *big.Int, _specialTopUp *big.Int, _specialPlayCountThreshold *big.Int, _playCountThresholdUpgrade *big.Int) (*types.Transaction, error) {
	return _Gashapon.Contract.SetBonusAndSpecialTopUp(&_Gashapon.TransactOpts, _bonusTopUp, _bonusPlayCountThreshold, _specialTopUp, _specialPlayCountThreshold, _playCountThresholdUpgrade)
}

// SetBonusAndSpecialTopUp is a paid mutator transaction binding the contract method 0x85d3a5a5.
//
// Solidity: function setBonusAndSpecialTopUp(uint256 _bonusTopUp, uint256 _bonusPlayCountThreshold, uint256 _specialTopUp, uint256 _specialPlayCountThreshold, uint256 _playCountThresholdUpgrade) returns()
func (_Gashapon *GashaponTransactorSession) SetBonusAndSpecialTopUp(_bonusTopUp *big.Int, _bonusPlayCountThreshold *big.Int, _specialTopUp *big.Int, _specialPlayCountThreshold *big.Int, _playCountThresholdUpgrade *big.Int) (*types.Transaction, error) {
	return _Gashapon.Contract.SetBonusAndSpecialTopUp(&_Gashapon.TransactOpts, _bonusTopUp, _bonusPlayCountThreshold, _specialTopUp, _specialPlayCountThreshold, _playCountThresholdUpgrade)
}

// SetRewardRate is a paid mutator transaction binding the contract method 0x18fde2ff.
//
// Solidity: function setRewardRate(uint256[] _itemIds, uint256[] _probabilities, uint256 _jackpot) returns()
func (_Gashapon *GashaponTransactor) SetRewardRate(opts *bind.TransactOpts, _itemIds []*big.Int, _probabilities []*big.Int, _jackpot *big.Int) (*types.Transaction, error) {
	return _Gashapon.contract.Transact(opts, "setRewardRate", _itemIds, _probabilities, _jackpot)
}

// SetRewardRate is a paid mutator transaction binding the contract method 0x18fde2ff.
//
// Solidity: function setRewardRate(uint256[] _itemIds, uint256[] _probabilities, uint256 _jackpot) returns()
func (_Gashapon *GashaponSession) SetRewardRate(_itemIds []*big.Int, _probabilities []*big.Int, _jackpot *big.Int) (*types.Transaction, error) {
	return _Gashapon.Contract.SetRewardRate(&_Gashapon.TransactOpts, _itemIds, _probabilities, _jackpot)
}

// SetRewardRate is a paid mutator transaction binding the contract method 0x18fde2ff.
//
// Solidity: function setRewardRate(uint256[] _itemIds, uint256[] _probabilities, uint256 _jackpot) returns()
func (_Gashapon *GashaponTransactorSession) SetRewardRate(_itemIds []*big.Int, _probabilities []*big.Int, _jackpot *big.Int) (*types.Transaction, error) {
	return _Gashapon.Contract.SetRewardRate(&_Gashapon.TransactOpts, _itemIds, _probabilities, _jackpot)
}

// SetTicketPriceAndPlayTopUp is a paid mutator transaction binding the contract method 0x5e46a690.
//
// Solidity: function setTicketPriceAndPlayTopUp(uint256 _ticketPrice, uint256 _playTopUp) returns()
func (_Gashapon *GashaponTransactor) SetTicketPriceAndPlayTopUp(opts *bind.TransactOpts, _ticketPrice *big.Int, _playTopUp *big.Int) (*types.Transaction, error) {
	return _Gashapon.contract.Transact(opts, "setTicketPriceAndPlayTopUp", _ticketPrice, _playTopUp)
}

// SetTicketPriceAndPlayTopUp is a paid mutator transaction binding the contract method 0x5e46a690.
//
// Solidity: function setTicketPriceAndPlayTopUp(uint256 _ticketPrice, uint256 _playTopUp) returns()
func (_Gashapon *GashaponSession) SetTicketPriceAndPlayTopUp(_ticketPrice *big.Int, _playTopUp *big.Int) (*types.Transaction, error) {
	return _Gashapon.Contract.SetTicketPriceAndPlayTopUp(&_Gashapon.TransactOpts, _ticketPrice, _playTopUp)
}

// SetTicketPriceAndPlayTopUp is a paid mutator transaction binding the contract method 0x5e46a690.
//
// Solidity: function setTicketPriceAndPlayTopUp(uint256 _ticketPrice, uint256 _playTopUp) returns()
func (_Gashapon *GashaponTransactorSession) SetTicketPriceAndPlayTopUp(_ticketPrice *big.Int, _playTopUp *big.Int) (*types.Transaction, error) {
	return _Gashapon.Contract.SetTicketPriceAndPlayTopUp(&_Gashapon.TransactOpts, _ticketPrice, _playTopUp)
}

// SetTreasury is a paid mutator transaction binding the contract method 0xf0f44260.
//
// Solidity: function setTreasury(address _treasury) returns()
func (_Gashapon *GashaponTransactor) SetTreasury(opts *bind.TransactOpts, _treasury common.Address) (*types.Transaction, error) {
	return _Gashapon.contract.Transact(opts, "setTreasury", _treasury)
}

// SetTreasury is a paid mutator transaction binding the contract method 0xf0f44260.
//
// Solidity: function setTreasury(address _treasury) returns()
func (_Gashapon *GashaponSession) SetTreasury(_treasury common.Address) (*types.Transaction, error) {
	return _Gashapon.Contract.SetTreasury(&_Gashapon.TransactOpts, _treasury)
}

// SetTreasury is a paid mutator transaction binding the contract method 0xf0f44260.
//
// Solidity: function setTreasury(address _treasury) returns()
func (_Gashapon *GashaponTransactorSession) SetTreasury(_treasury common.Address) (*types.Transaction, error) {
	return _Gashapon.Contract.SetTreasury(&_Gashapon.TransactOpts, _treasury)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Gashapon *GashaponTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Gashapon.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Gashapon *GashaponSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Gashapon.Contract.TransferOwnership(&_Gashapon.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Gashapon *GashaponTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Gashapon.Contract.TransferOwnership(&_Gashapon.TransactOpts, newOwner)
}

// GashaponOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Gashapon contract.
type GashaponOwnershipTransferredIterator struct {
	Event *GashaponOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GashaponOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GashaponOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GashaponOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GashaponOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GashaponOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GashaponOwnershipTransferred represents a OwnershipTransferred event raised by the Gashapon contract.
type GashaponOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Gashapon *GashaponFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*GashaponOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Gashapon.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &GashaponOwnershipTransferredIterator{contract: _Gashapon.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Gashapon *GashaponFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *GashaponOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Gashapon.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GashaponOwnershipTransferred)
				if err := _Gashapon.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Gashapon *GashaponFilterer) ParseOwnershipTransferred(log types.Log) (*GashaponOwnershipTransferred, error) {
	event := new(GashaponOwnershipTransferred)
	if err := _Gashapon.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GashaponPlayGashaIterator is returned from FilterPlayGasha and is used to iterate over the raw logs and unpacked data for PlayGasha events raised by the Gashapon contract.
type GashaponPlayGashaIterator struct {
	Event *GashaponPlayGasha // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GashaponPlayGashaIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GashaponPlayGasha)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GashaponPlayGasha)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GashaponPlayGashaIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GashaponPlayGashaIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GashaponPlayGasha represents a PlayGasha event raised by the Gashapon contract.
type GashaponPlayGasha struct {
	PlayRunningNo *big.Int
	User          common.Address
	HashedSecret  [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterPlayGasha is a free log retrieval operation binding the contract event 0x48200e8c35ec99d0da50738e30a23b1b2818fed2972233505f325a81c17ff097.
//
// Solidity: event PlayGasha(uint256 playRunningNo, address user, bytes32 hashedSecret)
func (_Gashapon *GashaponFilterer) FilterPlayGasha(opts *bind.FilterOpts) (*GashaponPlayGashaIterator, error) {

	logs, sub, err := _Gashapon.contract.FilterLogs(opts, "PlayGasha")
	if err != nil {
		return nil, err
	}
	return &GashaponPlayGashaIterator{contract: _Gashapon.contract, event: "PlayGasha", logs: logs, sub: sub}, nil
}

// WatchPlayGasha is a free log subscription operation binding the contract event 0x48200e8c35ec99d0da50738e30a23b1b2818fed2972233505f325a81c17ff097.
//
// Solidity: event PlayGasha(uint256 playRunningNo, address user, bytes32 hashedSecret)
func (_Gashapon *GashaponFilterer) WatchPlayGasha(opts *bind.WatchOpts, sink chan<- *GashaponPlayGasha) (event.Subscription, error) {

	logs, sub, err := _Gashapon.contract.WatchLogs(opts, "PlayGasha")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GashaponPlayGasha)
				if err := _Gashapon.contract.UnpackLog(event, "PlayGasha", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePlayGasha is a log parse operation binding the contract event 0x48200e8c35ec99d0da50738e30a23b1b2818fed2972233505f325a81c17ff097.
//
// Solidity: event PlayGasha(uint256 playRunningNo, address user, bytes32 hashedSecret)
func (_Gashapon *GashaponFilterer) ParsePlayGasha(log types.Log) (*GashaponPlayGasha, error) {
	event := new(GashaponPlayGasha)
	if err := _Gashapon.contract.UnpackLog(event, "PlayGasha", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GashaponRefundIterator is returned from FilterRefund and is used to iterate over the raw logs and unpacked data for Refund events raised by the Gashapon contract.
type GashaponRefundIterator struct {
	Event *GashaponRefund // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GashaponRefundIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GashaponRefund)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GashaponRefund)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GashaponRefundIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GashaponRefundIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GashaponRefund represents a Refund event raised by the Gashapon contract.
type GashaponRefund struct {
	PlayRunningNo *big.Int
	User          common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterRefund is a free log retrieval operation binding the contract event 0x510b82fea70ff89a8cc73cd7f29db2d7b480134c160cb52a258797b42d1989ad.
//
// Solidity: event Refund(uint256 playRunningNo, address user)
func (_Gashapon *GashaponFilterer) FilterRefund(opts *bind.FilterOpts) (*GashaponRefundIterator, error) {

	logs, sub, err := _Gashapon.contract.FilterLogs(opts, "Refund")
	if err != nil {
		return nil, err
	}
	return &GashaponRefundIterator{contract: _Gashapon.contract, event: "Refund", logs: logs, sub: sub}, nil
}

// WatchRefund is a free log subscription operation binding the contract event 0x510b82fea70ff89a8cc73cd7f29db2d7b480134c160cb52a258797b42d1989ad.
//
// Solidity: event Refund(uint256 playRunningNo, address user)
func (_Gashapon *GashaponFilterer) WatchRefund(opts *bind.WatchOpts, sink chan<- *GashaponRefund) (event.Subscription, error) {

	logs, sub, err := _Gashapon.contract.WatchLogs(opts, "Refund")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GashaponRefund)
				if err := _Gashapon.contract.UnpackLog(event, "Refund", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRefund is a log parse operation binding the contract event 0x510b82fea70ff89a8cc73cd7f29db2d7b480134c160cb52a258797b42d1989ad.
//
// Solidity: event Refund(uint256 playRunningNo, address user)
func (_Gashapon *GashaponFilterer) ParseRefund(log types.Log) (*GashaponRefund, error) {
	event := new(GashaponRefund)
	if err := _Gashapon.contract.UnpackLog(event, "Refund", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GashaponRevealIterator is returned from FilterReveal and is used to iterate over the raw logs and unpacked data for Reveal events raised by the Gashapon contract.
type GashaponRevealIterator struct {
	Event *GashaponReveal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GashaponRevealIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GashaponReveal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GashaponReveal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GashaponRevealIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GashaponRevealIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GashaponReveal represents a Reveal event raised by the Gashapon contract.
type GashaponReveal struct {
	PlayRunningNo  *big.Int
	User           common.Address
	Random         *big.Int
	Secret         string
	RewardItemId   *big.Int
	TotalPrizePool *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterReveal is a free log retrieval operation binding the contract event 0x10adcf11d1380037fa0e006be835b50827e2aeb3e86fd63d3f6740f76ab78335.
//
// Solidity: event Reveal(uint256 playRunningNo, address user, uint256 random, string secret, uint256 rewardItemId, uint256 totalPrizePool)
func (_Gashapon *GashaponFilterer) FilterReveal(opts *bind.FilterOpts) (*GashaponRevealIterator, error) {

	logs, sub, err := _Gashapon.contract.FilterLogs(opts, "Reveal")
	if err != nil {
		return nil, err
	}
	return &GashaponRevealIterator{contract: _Gashapon.contract, event: "Reveal", logs: logs, sub: sub}, nil
}

// WatchReveal is a free log subscription operation binding the contract event 0x10adcf11d1380037fa0e006be835b50827e2aeb3e86fd63d3f6740f76ab78335.
//
// Solidity: event Reveal(uint256 playRunningNo, address user, uint256 random, string secret, uint256 rewardItemId, uint256 totalPrizePool)
func (_Gashapon *GashaponFilterer) WatchReveal(opts *bind.WatchOpts, sink chan<- *GashaponReveal) (event.Subscription, error) {

	logs, sub, err := _Gashapon.contract.WatchLogs(opts, "Reveal")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GashaponReveal)
				if err := _Gashapon.contract.UnpackLog(event, "Reveal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReveal is a log parse operation binding the contract event 0x10adcf11d1380037fa0e006be835b50827e2aeb3e86fd63d3f6740f76ab78335.
//
// Solidity: event Reveal(uint256 playRunningNo, address user, uint256 random, string secret, uint256 rewardItemId, uint256 totalPrizePool)
func (_Gashapon *GashaponFilterer) ParseReveal(log types.Log) (*GashaponReveal, error) {
	event := new(GashaponReveal)
	if err := _Gashapon.contract.UnpackLog(event, "Reveal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GashaponRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the Gashapon contract.
type GashaponRoleAdminChangedIterator struct {
	Event *GashaponRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GashaponRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GashaponRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GashaponRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GashaponRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GashaponRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GashaponRoleAdminChanged represents a RoleAdminChanged event raised by the Gashapon contract.
type GashaponRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Gashapon *GashaponFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*GashaponRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Gashapon.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &GashaponRoleAdminChangedIterator{contract: _Gashapon.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Gashapon *GashaponFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *GashaponRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Gashapon.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GashaponRoleAdminChanged)
				if err := _Gashapon.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Gashapon *GashaponFilterer) ParseRoleAdminChanged(log types.Log) (*GashaponRoleAdminChanged, error) {
	event := new(GashaponRoleAdminChanged)
	if err := _Gashapon.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GashaponRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the Gashapon contract.
type GashaponRoleGrantedIterator struct {
	Event *GashaponRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GashaponRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GashaponRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GashaponRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GashaponRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GashaponRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GashaponRoleGranted represents a RoleGranted event raised by the Gashapon contract.
type GashaponRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Gashapon *GashaponFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*GashaponRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Gashapon.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &GashaponRoleGrantedIterator{contract: _Gashapon.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Gashapon *GashaponFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *GashaponRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Gashapon.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GashaponRoleGranted)
				if err := _Gashapon.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Gashapon *GashaponFilterer) ParseRoleGranted(log types.Log) (*GashaponRoleGranted, error) {
	event := new(GashaponRoleGranted)
	if err := _Gashapon.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GashaponRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the Gashapon contract.
type GashaponRoleRevokedIterator struct {
	Event *GashaponRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GashaponRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GashaponRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GashaponRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GashaponRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GashaponRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GashaponRoleRevoked represents a RoleRevoked event raised by the Gashapon contract.
type GashaponRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Gashapon *GashaponFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*GashaponRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Gashapon.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &GashaponRoleRevokedIterator{contract: _Gashapon.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Gashapon *GashaponFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *GashaponRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Gashapon.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GashaponRoleRevoked)
				if err := _Gashapon.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Gashapon *GashaponFilterer) ParseRoleRevoked(log types.Log) (*GashaponRoleRevoked, error) {
	event := new(GashaponRoleRevoked)
	if err := _Gashapon.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
